--Challenge 1 : Jointures entre Tables
--Affichez toutes les commandes avec les noms des clients
SELECT o.order_id, c.first_name, c.last_name, o.order_date, o.total_amount
FROM orders o
JOIN customers c ON o.customer_id = c.customer_id;
--Listez les clients n’ayant passé aucune commande (jointure externe)
SELECT c.first_name, c.last_name
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
WHERE o.order_id IS NULL;
--Nombre de commandes par client
SELECT c.first_name, c.last_name, COUNT(o.order_id) AS nombre_commandes
FROM customers c
LEFT JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id;
--Challenge 2 : Agrégation de Données
-- Montant total des commandes
SELECT SUM(total_amount) AS montant_total_commandes
FROM orders;
--Nombre total de clients
SELECT COUNT(*) AS nombre_clients
FROM customers;
-- Montant moyen des commandes
SELECT AVG(total_amount) AS moyenne_commandes
FROM orders;
--Challenge 3 : Groupement de Données
-- Montant total des commandes par client
SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total_par_client
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id;
--Nombre de commandes par mois
SELECT DATE_TRUNC('month', order_date) AS mois, COUNT(*) AS nb_commandes
FROM orders
GROUP BY mois
ORDER BY mois;
--Montant moyen des commandes par mois
SELECT DATE_TRUNC('month', order_date) AS mois, AVG(total_amount) AS moyenne_par_mois
FROM orders
GROUP BY mois
ORDER BY mois;
--Clients ayant un total de commandes > 1000 
SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
HAVING SUM(o.total_amount) > 1000;
--Challenge 4 : Sous-Requêtes
-- Clients ayant passé une commande > 200 
SELECT DISTINCT c.first_name, c.last_name
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
WHERE o.total_amount > 200;
--Client avec le plus gros montant cumulé de commandes
SELECT c.first_name, c.last_name, SUM(o.total_amount) AS total
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id
ORDER BY total DESC
LIMIT 1;
--Commandes dont le montant est supérieur à la moyenne
SELECT *
FROM orders
WHERE total_amount > (
    SELECT AVG(total_amount) FROM orders
);
--Challenge 5 : Création de Vues
-- Vue customer_orders_view (client + commandes)
CREATE VIEW customer_orders_view AS
SELECT c.customer_id, c.first_name, c.last_name, o.order_id, o.order_date, o.total_amount
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id;
--Afficher les clients avec > 1000 € en commandes (via la vue)
SELECT first_name, last_name, SUM(total_amount) AS total_commandes
FROM customer_orders_view
GROUP BY customer_id, first_name, last_name
HAVING SUM(total_amount) > 1000;

--Vue monthly_sales_view (ventes totales par mois)
CREATE VIEW monthly_sales_view AS
SELECT DATE_TRUNC('month', order_date) AS mois, SUM(total_amount) AS total_ventes
FROM orders
GROUP BY mois
ORDER BY mois;

